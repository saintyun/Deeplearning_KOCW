{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"9_2_2 실습.ipynb","provenance":[{"file_id":"1LjqOTr3EhwKe9K8cCqsFbYiE3-JmhPdy","timestamp":1651502990445}],"authorship_tag":"ABX9TyP4aGKSaPAD4f+PhGfv7gEW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["다중퍼셉트론 신경망 모델"],"metadata":{"id":"JMvKOS0dFPQu"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":481},"id":"y0Qa8mWPE9OF","executionInfo":{"status":"ok","timestamp":1651503223324,"user_tz":-540,"elapsed":102189,"user":{"displayName":"김태영","userId":"15933429515795148017"}},"outputId":"5e4d382b-2800-433b-e8f0-ceb4253584b3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n","17473536/17464789 [==============================] - 0s 0us/step\n","Epoch 1/2\n","313/313 [==============================] - 39s 122ms/step - loss: 0.4202 - accuracy: 0.7912 - val_loss: 0.2998 - val_accuracy: 0.8810\n","Epoch 2/2\n","313/313 [==============================] - 37s 118ms/step - loss: 0.0492 - accuracy: 0.9841 - val_loss: 0.4577 - val_accuracy: 0.8480\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["391/391 [==============================] - 10s 24ms/step - loss: 0.4836 - accuracy: 0.8375\n","## evaluation loss and_metrics ##\n","[0.4836357533931732, 0.8374800086021423]\n"]}],"source":["# 0. 사용할 패키지 불러오기\n","from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","from keras.models import Sequential\n","from keras.layers import Dense, Embedding\n","from keras.layers import Flatten\n","\n","max_features = 20000\n","text_max_words = 200\n","\n","# 1. 데이터셋 생성하기\n","\n","# 훈련셋과 시험셋 불러오기\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n","\n","# 훈련셋과 검증셋 분리\n","x_val = x_train[20000:]\n","y_val = y_train[20000:]\n","x_train = x_train[:20000]\n","y_train = y_train[:20000]\n","\n","# 데이터셋 전처리 : 문장 길이 맞추기\n","x_train = sequence.pad_sequences(x_train, maxlen=text_max_words)\n","x_val = sequence.pad_sequences(x_val, maxlen=text_max_words)\n","x_test = sequence.pad_sequences(x_test, maxlen=text_max_words)\n","\n","# 2. 모델 구성하기\n","model = Sequential()\n","model.add(Embedding(max_features, 128, input_length=text_max_words))\n","model.add(Flatten())\n","model.add(Dense(256, activation='relu'))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","# 3. 모델 학습과정 설정하기\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# 4. 모델 학습시키기\n","hist = model.fit(x_train, y_train, epochs=2, batch_size=64, validation_data=(x_val, y_val))\n","\n","# 5. 학습과정 살펴보기\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","fig, loss_ax = plt.subplots()\n","\n","acc_ax = loss_ax.twinx()\n","\n","loss_ax.plot(hist.history['loss'], 'y', label='train loss')\n","loss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n","loss_ax.set_ylim([-0.2, 1.2])\n","\n","acc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\n","acc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n","acc_ax.set_ylim([-0.2, 1.2])\n","\n","loss_ax.set_xlabel('epoch')\n","loss_ax.set_ylabel('loss')\n","acc_ax.set_ylabel('accuracy')\n","\n","loss_ax.legend(loc='upper left')\n","acc_ax.legend(loc='lower left')\n","\n","plt.show()\n","\n","# 6. 모델 평가하기\n","loss_and_metrics = model.evaluate(x_test, y_test, batch_size=64)\n","print('## evaluation loss and_metrics ##')\n","print(loss_and_metrics)"]},{"cell_type":"markdown","source":["순환 신경망 모델"],"metadata":{"id":"PV8gH_KgFUMG"}},{"cell_type":"code","source":["# 0. 사용할 패키지 불러오기\n","from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","from keras.models import Sequential\n","from keras.layers import Dense, Embedding, LSTM\n","from keras.layers import Flatten\n","\n","max_features = 20000\n","text_max_words = 200\n","\n","# 1. 데이터셋 생성하기\n","\n","# 훈련셋과 시험셋 불러오기\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n","\n","# 훈련셋과 검증셋 분리\n","x_val = x_train[20000:]\n","y_val = y_train[20000:]\n","x_train = x_train[:20000]\n","y_train = y_train[:20000]\n","\n","# 데이터셋 전처리 : 문장 길이 맞추기\n","x_train = sequence.pad_sequences(x_train, maxlen=text_max_words)\n","x_val = sequence.pad_sequences(x_val, maxlen=text_max_words)\n","x_test = sequence.pad_sequences(x_test, maxlen=text_max_words)\n","\n","# 2. 모델 구성하기\n","model = Sequential()\n","model.add(Embedding(max_features, 128))\n","model.add(LSTM(128))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","# 3. 모델 학습과정 설정하기\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# 4. 모델 학습시키기\n","hist = model.fit(x_train, y_train, epochs=2, batch_size=64, validation_data=(x_val, y_val))\n","\n","# 5. 학습과정 살펴보기\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","fig, loss_ax = plt.subplots()\n","\n","acc_ax = loss_ax.twinx()\n","\n","loss_ax.plot(hist.history['loss'], 'y', label='train loss')\n","loss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n","loss_ax.set_ylim([-0.2, 1.2])\n","\n","acc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\n","acc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n","acc_ax.set_ylim([-0.2, 1.2])\n","\n","loss_ax.set_xlabel('epoch')\n","loss_ax.set_ylabel('loss')\n","acc_ax.set_ylabel('accuracy')\n","\n","loss_ax.legend(loc='upper left')\n","acc_ax.legend(loc='lower left')\n","\n","plt.show()\n","\n","# 6. 모델 평가하기\n","loss_and_metrics = model.evaluate(x_test, y_test, batch_size=64)\n","print('## evaluation loss and_metrics ##')\n","print(loss_and_metrics)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"VX1Ip2Z_FYCs","executionInfo":{"status":"ok","timestamp":1651503674487,"user_tz":-540,"elapsed":450673,"user":{"displayName":"김태영","userId":"15933429515795148017"}},"outputId":"6d748b43-01af-40e2-e47f-f29dd9f2bb82"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","313/313 [==============================] - 168s 529ms/step - loss: 0.4647 - accuracy: 0.7727 - val_loss: 0.3197 - val_accuracy: 0.8670\n","Epoch 2/2\n","313/313 [==============================] - 166s 531ms/step - loss: 0.2287 - accuracy: 0.9128 - val_loss: 0.3332 - val_accuracy: 0.8642\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["391/391 [==============================] - 61s 155ms/step - loss: 0.3613 - accuracy: 0.8500\n","## evaluation loss and_metrics ##\n","[0.36129921674728394, 0.8500000238418579]\n"]}]},{"cell_type":"markdown","source":["컨볼루션 신경망 모델"],"metadata":{"id":"OrjgkEBmFdCP"}},{"cell_type":"code","source":["# 0. 사용할 패키지 불러오기\n","from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","from keras.models import Sequential\n","from keras.layers import Dense, Embedding, LSTM\n","from keras.layers import Flatten, Dropout\n","from keras.layers import Conv1D, GlobalMaxPooling1D\n","\n","max_features = 20000\n","text_max_words = 200\n","\n","# 1. 데이터셋 생성하기\n","\n","# 훈련셋과 시험셋 불러오기\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n","\n","# 훈련셋과 검증셋 분리\n","x_val = x_train[20000:]\n","y_val = y_train[20000:]\n","x_train = x_train[:20000]\n","y_train = y_train[:20000]\n","\n","# 데이터셋 전처리 : 문장 길이 맞추기\n","x_train = sequence.pad_sequences(x_train, maxlen=text_max_words)\n","x_val = sequence.pad_sequences(x_val, maxlen=text_max_words)\n","x_test = sequence.pad_sequences(x_test, maxlen=text_max_words)\n","\n","# 2. 모델 구성하기\n","model = Sequential()\n","model.add(Embedding(max_features, 128, input_length=text_max_words))\n","model.add(Dropout(0.2))\n","model.add(Conv1D(256,\n","                 3,\n","                 padding='valid',\n","                 activation='relu',\n","                 strides=1))\n","model.add(GlobalMaxPooling1D())\n","model.add(Dense(128, activation='relu'))\n","model.add(Dropout(0.2))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","# 3. 모델 학습과정 설정하기\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# 4. 모델 학습시키기\n","hist = model.fit(x_train, y_train, epochs=2, batch_size=64, validation_data=(x_val, y_val))\n","\n","# 5. 학습과정 살펴보기\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","fig, loss_ax = plt.subplots()\n","\n","acc_ax = loss_ax.twinx()\n","\n","loss_ax.plot(hist.history['loss'], 'y', label='train loss')\n","loss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n","loss_ax.set_ylim([-0.2, 1.2])\n","\n","acc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\n","acc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n","acc_ax.set_ylim([-0.2, 1.2])\n","\n","loss_ax.set_xlabel('epoch')\n","loss_ax.set_ylabel('loss')\n","acc_ax.set_ylabel('accuracy')\n","\n","loss_ax.legend(loc='upper left')\n","acc_ax.legend(loc='lower left')\n","\n","plt.show()\n","\n","# 6. 모델 평가하기\n","loss_and_metrics = model.evaluate(x_test, y_test, batch_size=64)\n","print('## evaluation loss and_metrics ##')\n","print(loss_and_metrics)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"7TqrKlrNFcYx","executionInfo":{"status":"ok","timestamp":1651503902200,"user_tz":-540,"elapsed":227717,"user":{"displayName":"김태영","userId":"15933429515795148017"}},"outputId":"15f67aac-4496-4e20-ee5f-ae59d50dceff"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","313/313 [==============================] - 74s 234ms/step - loss: 0.4577 - accuracy: 0.7638 - val_loss: 0.3024 - val_accuracy: 0.8730\n","Epoch 2/2\n","313/313 [==============================] - 73s 234ms/step - loss: 0.2135 - accuracy: 0.9152 - val_loss: 0.2632 - val_accuracy: 0.8928\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["391/391 [==============================] - 19s 49ms/step - loss: 0.2734 - accuracy: 0.8856\n","## evaluation loss and_metrics ##\n","[0.27338579297065735, 0.8855999708175659]\n"]}]},{"cell_type":"markdown","source":["순환 컨볼루션 신경망 모델"],"metadata":{"id":"w-_5kKx9Ff2q"}},{"cell_type":"code","source":["# 0. 사용할 패키지 불러오기\n","from keras.datasets import imdb\n","from keras.preprocessing import sequence\n","from keras.models import Sequential\n","from keras.layers import Dense, Embedding, LSTM\n","from keras.layers import Flatten, Dropout\n","from keras.layers import Conv1D, MaxPooling1D\n","\n","max_features = 20000\n","text_max_words = 200\n","\n","# 1. 데이터셋 생성하기\n","\n","# 훈련셋과 시험셋 불러오기\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\n","\n","# 훈련셋과 검증셋 분리\n","x_val = x_train[20000:]\n","y_val = y_train[20000:]\n","x_train = x_train[:20000]\n","y_train = y_train[:20000]\n","\n","# 데이터셋 전처리 : 문장 길이 맞추기\n","x_train = sequence.pad_sequences(x_train, maxlen=text_max_words)\n","x_val = sequence.pad_sequences(x_val, maxlen=text_max_words)\n","x_test = sequence.pad_sequences(x_test, maxlen=text_max_words)\n","\n","# 2. 모델 구성하기\n","model = Sequential()\n","model.add(Embedding(max_features, 128, input_length=text_max_words))\n","model.add(Dropout(0.2))\n","model.add(Conv1D(256,\n","                 3,\n","                 padding='valid',\n","                 activation='relu',\n","                 strides=1))\n","model.add(MaxPooling1D(pool_size=4))\n","model.add(LSTM(128))\n","model.add(Dense(1, activation='sigmoid'))\n","\n","# 3. 모델 학습과정 설정하기\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# 4. 모델 학습시키기\n","hist = model.fit(x_train, y_train, epochs=2, batch_size=64, validation_data=(x_val, y_val))\n","\n","# 5. 학습과정 살펴보기\n","%matplotlib inline\n","import matplotlib.pyplot as plt\n","\n","fig, loss_ax = plt.subplots()\n","\n","acc_ax = loss_ax.twinx()\n","\n","loss_ax.plot(hist.history['loss'], 'y', label='train loss')\n","loss_ax.plot(hist.history['val_loss'], 'r', label='val loss')\n","loss_ax.set_ylim([-0.2, 1.2])\n","\n","acc_ax.plot(hist.history['accuracy'], 'b', label='train acc')\n","acc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')\n","acc_ax.set_ylim([-0.2, 1.2])\n","\n","loss_ax.set_xlabel('epoch')\n","loss_ax.set_ylabel('loss')\n","acc_ax.set_ylabel('accuracy')\n","\n","loss_ax.legend(loc='upper left')\n","acc_ax.legend(loc='lower left')\n","\n","plt.show()\n","\n","# 6. 모델 평가하기\n","loss_and_metrics = model.evaluate(x_test, y_test, batch_size=64)\n","print('## evaluation loss and_metrics ##')\n","print(loss_and_metrics)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":428},"id":"Khlh8VMGFlRg","executionInfo":{"status":"ok","timestamp":1651504209391,"user_tz":-540,"elapsed":307195,"user":{"displayName":"김태영","userId":"15933429515795148017"}},"outputId":"2c96e049-e85f-4721-e9fd-b16eda73d87b"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","313/313 [==============================] - 127s 398ms/step - loss: 0.4080 - accuracy: 0.7983 - val_loss: 0.3173 - val_accuracy: 0.8734\n","Epoch 2/2\n","313/313 [==============================] - 123s 393ms/step - loss: 0.1920 - accuracy: 0.9275 - val_loss: 0.3110 - val_accuracy: 0.8726\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["391/391 [==============================] - 37s 94ms/step - loss: 0.3300 - accuracy: 0.8646\n","## evaluation loss and_metrics ##\n","[0.3299899101257324, 0.8646399974822998]\n"]}]}]}